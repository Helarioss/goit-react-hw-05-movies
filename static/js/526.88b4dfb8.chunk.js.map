{"version":3,"file":"static/js/526.88b4dfb8.chunk.js","mappings":"mRAEaA,EAAOC,EAAAA,GAAAA,GAAH,+KASJC,EAAQD,EAAAA,GAAAA,IAAH,uG,4BCJLE,EACL,OADKA,EAEF,UAFEA,EAGD,WAHCA,EAID,WA6DZ,EApCa,WACX,IACA,EAxB8B,SAAAC,GAC9B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASF,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEH,EAAUN,GADZ,mBAGuBU,EAAAA,EAAAA,IAAYT,GAHnC,OAGUE,EAHV,OAIIC,EAAQD,GACRG,EAAUN,GALd,gDAOIQ,EAAS,EAAD,IACRF,EAAUN,GARd,0DADc,uBAAC,WAAD,wBAYdW,KACC,CAACV,IAEG,CAAEE,KAAAA,EAAME,OAAAA,EAAQE,MAAAA,GAISK,EADZC,EAAAA,EAAAA,MAAZC,SACAX,EAAR,EAAQA,KAAME,EAAd,EAAcA,OAAQE,EAAtB,EAAsBA,MAEtB,OAAIF,IAAWL,GACN,SAACe,EAAA,EAAD,IAGLV,IAAWL,GACN,qCAAaO,EAAMS,WAGxBX,IAAWL,GAAmC,IAAhBG,EAAKc,QAC9B,iEAIP,SAACpB,EAAD,UACGM,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAWpB,EAAlC,EAAkCA,GAAlC,OACR,2BACE,SAACF,EAAD,CACEuB,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAG,UAAKL,MAEV,wBAAKA,KACL,uCAAeE,GAAa,eAVrBpB,U,0MCrDXwB,EAAU,mCAEhBC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,8FACjBD,IAAAA,IAAA,oCAAuCD,IADtB,uCACkCG,KAAKC,SADvC,2CAAH,qDAIjBC,EAAY,mCAAG,WAAM7B,GAAN,iFACZyB,IAAAA,IAAA,iBAAoBzB,EAApB,oBAAkCwB,IADtB,uCACkCG,MADlC,2CAAH,sDAIZG,EAAc,mCAAG,WAAM9B,GAAN,iFACdyB,IAAAA,IAAA,iBAAoBzB,EAApB,4BAA0CwB,IAD5B,uCACwCG,KACjEC,SAFyB,2CAAH,sDAKdnB,EAAW,mCAAG,WAAMT,GAAN,iFACXyB,IAAAA,IAAA,iBAAoBzB,EAApB,4BAA0CwB,IAD/B,uCAC2CG,KAAKzB,MADhD,2CAAH,sDAIX6B,EAAY,mCAAG,WAAMC,GAAN,iFACZP,IAAAA,IAAA,8BAAiCO,EAAjC,oBAAkDR,IADtC,uCAEvBG,KAAKC,SAFkB,2CAAH,uD","sources":["Pages/Cast/Cast.styled.js","Pages/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 30px 20px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  height: 340px;\n  object-fit: cover;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastById } from 'services/api';\nimport { Image, List } from './Cast.styled';\nimport UnknowPerson from 'images/unknown-person.jpg';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport const STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport const useFetchCastById = id => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchCast() {\n      setStatus(STATUS.PENDING);\n      try {\n        const cast = await getCastById(id);\n        setCast(cast);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(STATUS.REJECTED);\n      }\n    }\n    fetchCast();\n  }, [id]);\n\n  return { cast, status, error };\n};\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { cast, status, error } = useFetchCastById(movieId);\n\n  if (status === STATUS.PENDING) {\n    return <Spinner />;\n  }\n\n  if (status === STATUS.REJECTED) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (status === STATUS.RESOLVED && cast.length === 0) {\n    return <div>We don't have cast for this movie.</div>;\n  }\n\n  return (\n    <List>\n      {cast.map(({ name, profile_path, character, id }) => (\n        <li key={id}>\n          <Image\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : UnknowPerson\n            }\n            alt={`${name}`}\n          ></Image>\n          <h3>{name}</h3>\n          <p>Character: {character || 'unknown'}</p>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '80dd5d087ca76f72d259ad6d0e54d71f';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  return (await axios.get(`/trending/all/day?api_key=${API_KEY}`)).data.results;\n};\n\nexport const getMovieById = async id => {\n  return (await axios.get(`/movie/${id}?api_key=${API_KEY}`)).data;\n};\n\nexport const getReviewsById = async id => {\n  return (await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`)).data\n    .results;\n};\n\nexport const getCastById = async id => {\n  return (await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`)).data.cast;\n};\n\nexport const searchMovies = async query => {\n  return (await axios.get(`/search/movie?query=${query}&api_key=${API_KEY}`))\n    .data.results;\n};\n"],"names":["List","styled","Image","STATUS","id","useState","cast","setCast","status","setStatus","error","setError","useEffect","getCastById","fetchCast","useFetchCastById","useParams","movieId","Spinner","message","length","map","name","profile_path","character","src","UnknowPerson","alt","API_KEY","axios","getTrendingMovies","data","results","getMovieById","getReviewsById","searchMovies","query"],"sourceRoot":""}