{"version":3,"file":"static/js/930.d1808b6f.chunk.js","mappings":"+QAKaA,EACL,OADKA,EAEF,UAFEA,EAGD,WAHCA,EAID,WAsDZ,EA5BgB,WACd,IACA,EAzB0B,SAAAC,GAC1B,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAASF,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEH,EAAUN,GADZ,mBAG0BU,EAAAA,EAAAA,IAAeT,GAHzC,OAGUE,EAHV,OAIIC,EAAWD,GACXG,EAAUN,GALd,gDAOIQ,EAAS,EAAD,IACRF,EAAUN,GARd,0DADc,uBAAC,WAAD,wBAYdW,KACC,CAACV,IAEG,CAAEE,QAAAA,EAASE,OAAAA,EAAQE,MAAAA,GAKSK,EADfC,EAAAA,EAAAA,MAAZC,SACAX,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,OAAQE,EAAzB,EAAyBA,MAEzB,OAAIF,IAAWL,GACN,SAACe,EAAA,EAAD,IAGLV,IAAWL,GACN,qCAAaO,EAAMS,WAGxBX,IAAWL,GAAsC,IAAnBG,EAAQc,QACjC,wEAIP,wBACGd,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASnB,EAApB,EAAoBA,GAApB,OACX,2BACE,qCAAakB,MACb,uBAAIC,MAFGnB,U,0MCpDXoB,EAAU,mCAEhBC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,8FACjBD,IAAAA,IAAA,oCAAuCD,IADtB,uCACkCG,KAAKC,SADvC,2CAAH,qDAIjBC,EAAY,mCAAG,WAAMzB,GAAN,iFACZqB,IAAAA,IAAA,iBAAoBrB,EAApB,oBAAkCoB,IADtB,uCACkCG,MADlC,2CAAH,sDAIZd,EAAc,mCAAG,WAAMT,GAAN,iFACdqB,IAAAA,IAAA,iBAAoBrB,EAApB,4BAA0CoB,IAD5B,uCACwCG,KACjEC,SAFyB,2CAAH,sDAKdE,EAAW,mCAAG,WAAM1B,GAAN,iFACXqB,IAAAA,IAAA,iBAAoBrB,EAApB,4BAA0CoB,IAD/B,uCAC2CG,KAAKI,MADhD,2CAAH,sDAIXC,EAAY,mCAAG,WAAMC,GAAN,iFACZR,IAAAA,IAAA,8BAAiCQ,EAAjC,oBAAkDT,IADtC,uCAEvBG,KAAKC,SAFkB,2CAAH","sources":["Pages/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { Spinner } from 'components/Spinner';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsById } from 'services/api';\n\nexport const STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst useFetchReviewsById = id => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchReviews() {\n      setStatus(STATUS.PENDING);\n      try {\n        const reviews = await getReviewsById(id);\n        setReviews(reviews);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(STATUS.REJECTED);\n      }\n    }\n    fetchReviews();\n  }, [id]);\n\n  return { reviews, status, error };\n};\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const { reviews, status, error } = useFetchReviewsById(movieId);\n\n  if (status === STATUS.PENDING) {\n    return <Spinner />;\n  }\n\n  if (status === STATUS.REJECTED) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (status === STATUS.RESOLVED && reviews.length === 0) {\n    return <div>We don't have any reviews for this movie.</div>;\n  }\n\n  return (\n    <ul>\n      {reviews.map(({ author, content, id }) => (\n        <li key={id}>\n          <h3>Author: {author}</h3>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '80dd5d087ca76f72d259ad6d0e54d71f';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  return (await axios.get(`/trending/all/day?api_key=${API_KEY}`)).data.results;\n};\n\nexport const getMovieById = async id => {\n  return (await axios.get(`/movie/${id}?api_key=${API_KEY}`)).data;\n};\n\nexport const getReviewsById = async id => {\n  return (await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`)).data\n    .results;\n};\n\nexport const getCastById = async id => {\n  return (await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`)).data.cast;\n};\n\nexport const searchMovies = async query => {\n  return (await axios.get(`/search/movie?query=${query}&api_key=${API_KEY}`))\n    .data.results;\n};\n"],"names":["STATUS","id","useState","reviews","setReviews","status","setStatus","error","setError","useEffect","getReviewsById","fetchReviews","useFetchReviewsById","useParams","movieId","Spinner","message","length","map","author","content","API_KEY","axios","getTrendingMovies","data","results","getMovieById","getCastById","cast","searchMovies","query"],"sourceRoot":""}